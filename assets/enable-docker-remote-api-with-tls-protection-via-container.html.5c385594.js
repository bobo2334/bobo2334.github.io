import{r as n,o as s,c as e,a,b as o,w as t,F as p,d as c,e as r}from"./app.3ac8c66e.js";const l={},i=c('<h1 id="以容器的方式暴露-docker-remote-api-并启用-tls" tabindex="-1"><a class="header-anchor" href="#以容器的方式暴露-docker-remote-api-并启用-tls" aria-hidden="true">#</a> 以容器的方式暴露 Docker Remote API 并启用 TLS</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>之前在 “开启 Docker Remote API 并启用 TLS”<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> 中记录过 Docker 暴露 Remote API 并配置 TLS 支持，虽然其中引用了别人的脚本来简化证书的签发步骤，但是在证书签发完成之后还是需要对 Docker 的启动命令进行修改，还是一个比较繁琐的步骤。</p><p>后来我发现了 docker-remote-api-tls<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> 项目，它提供了一个镜像，在运行镜像之后它会自动完成证书签发和 API 转发步骤。</p><h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><p>可以通过 Docker Compose 方便地启动这个容器，下面是 <code>docker-compose.yml</code> 文件的内容。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">api</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> kekru/docker<span class="token punctuation">-</span>remote<span class="token punctuation">-</span>api<span class="token punctuation">-</span>tls<span class="token punctuation">:</span>v0.3.0\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> 2376<span class="token punctuation">:</span><span class="token number">443</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> CREATE_CERTS_WITH_PW=dockercompose\n      <span class="token punctuation">-</span> CERT_EXPIRATION_DAYS=3650\n      <span class="token punctuation">-</span> CA_EXPIRATION_DAYS=36500\n      <span class="token punctuation">-</span> CERT_HOSTNAME=192.168.229.129.nip.io\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /root/compose/docker<span class="token punctuation">-</span>remote<span class="token punctuation">-</span>api<span class="token punctuation">-</span>with<span class="token punctuation">-</span>tls/certs<span class="token punctuation">:</span>/data/certs\n      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock<span class="token punctuation">:</span>ro\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>有以下几点需要注意：</p><ol><li>第 6 行，容器内的端口是 443，需要映射到容器外 2376 端口；</li><li>第 8 行， <code>CREATE_CERTS_WITH_PW</code> 设置证书密码；</li><li>第 9 行， <code>CERT_EXPIRATION_DAYS</code> 设置证书过期时间，默认 365 天；</li><li>第 10 行， <code>CA_EXPIRATION_DAYS</code> 设置 CA 证书过期时间，默认 900 天；</li><li>第 11 行， <code>CERT_HOSTNAME</code> 设置域名，如果没有域名可以用 nip.io<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup> 来得到一个可以解析到任意 IP 的域名。形如 <code>192.168.229.129.nip.io</code> 的域名会被解析至 <code>192.168.229.129</code> ；还有其他形式的域名可以在 nip.io 网站中查看；</li><li>第 13 行，挂载证书目录，首次启动时证书会被自动创建并存放在此目录中；</li><li>第 14 行，挂载 <code>docker.sock</code> 。</li></ol><p>通过 <code>docker compose up -d</code> 启动容器。根据配置，证书会被自动创建在 <code>/root/compose/docker-remote-api-with-tls/certs</code> 目录中。</p><p>该目录的结构如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>certs/\n├── ca-cert.pem\n├── ca-key.pem\n├── client\n│   ├── ca.pem\n│   ├── cert.pem\n│   └── key.pem\n├── server-cert.pem\n└── server-key.pem\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中，客户端需要的证书文件存放在 <code>client</code> 目录中。此时 Docker Remote API 已经暴露在 2376 端口，客户端可以使用证书文件来通过认证。</p><p>如果需要重新签发证书文件，只需要清空 <code>certs</code> 文件夹即可。</p><hr class="footnotes-sep">',15),u={class:"footnotes"},k={class:"footnotes-list"},d={id:"footnote1",class:"footnote-item"},m=r("开启 Docker Remote API 并启用 TLS"),b=r(),f=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),h={id:"footnote2",class:"footnote-item"},A={href:"https://github.com/kekru/docker-remote-api-tls",target:"_blank",rel:"noopener noreferrer"},T=r("kekru/docker-remote-api-tls: Docker Image that forwards to the Docker API Socket and requires TLS Client authentication"),I=r(),_=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),R={id:"footnote3",class:"footnote-item"},v={href:"https://nip.io/",target:"_blank",rel:"noopener noreferrer"},y=r("nip.io - wildcard DNS for any IP Address"),E=r(),P=a("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);l.render=function(c,r){const l=n("RouterLink"),S=n("OutboundLink");return s(),e(p,null,[i,a("section",u,[a("ol",k,[a("li",d,[a("p",null,[o(l,{to:"/articles/enable-docker-remote-api-with-tls-protection.html"},{default:t((()=>[m])),_:1}),b,f])]),a("li",h,[a("p",null,[a("a",A,[T,o(S)]),I,_])]),a("li",R,[a("p",null,[a("a",v,[y,o(S)]),E,P])])])])],64)};export{l as default};
