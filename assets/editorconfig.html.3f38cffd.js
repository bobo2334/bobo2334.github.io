import{r as e,o as n,c as a,a as s,b as t,F as o,d as c,e as d}from"./app.374a34b2.js";const l={},r=c('<h1 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig" aria-hidden="true">#</a> EditorConfig</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>EditorConfig<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> 配置文件被许多优秀的代码编辑器默认支持，只要 <code>.editorconfig</code> 文件存在于项目的根目录下，它就会被编辑器读取并应用。</p><p>将项目文件格式写入名为 <code>.editorconfig</code> 的配置文件，如文件编码、换行风格、缩进风格等，以便多个开发人员在项目里保持一致的编码风格。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-ini ext-ini line-numbers-mode"><pre class="language-ini"><code><span class="token comment"># EditorConfig is awesome: https://EditorConfig.org</span>\n\n<span class="token key attr-name">root</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>\n\n<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">*</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">end_of_line</span> <span class="token punctuation">=</span> <span class="token value attr-value">lf</span>\n<span class="token key attr-name">charset</span> <span class="token punctuation">=</span> <span class="token value attr-value">utf-8</span>\n<span class="token key attr-name">insert_final_newline</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>\n<span class="token key attr-name">trim_trailing_whitespace</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>\n<span class="token key attr-name">indent_style</span> <span class="token punctuation">=</span> <span class="token value attr-value">space</span>\n<span class="token key attr-name">indent_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span>\n\n<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">{*.ts, *.js}</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">indent_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>用 <code>#</code> 标注注释；</p><p>配置可以分段，在 <code>[]</code> 之中声明要匹配的文件，可以用 <code>{}</code> 来声明多种匹配规则，用英文逗号 <code>,</code> 分隔这些规则；</p><ol><li><code>*</code> ，匹配任意字符串，除了 <code>/</code> ；</li><li><code>**</code> ，匹配任意字符串；</li><li><code>?</code> ，匹配单个字符；</li><li><code>[name]</code> ，匹配 <code>name</code> 中的任意单个字符，即 <code>n</code> 、 <code>a</code> 、 <code>m</code> 和 <code>e</code> ；</li><li><code>[!name]</code> ，匹配不出现在 <code>name</code> 中的单个字符；</li><li><code>{s1, s2, s3}</code> ，联合多个匹配；</li><li><code>{1..9}</code> ，匹配任意 <code>1</code> 至 <code>9</code> 之间的数字。</li></ol><p>用 <code>key=value</code> 的形式定义属性，常用的一些属性如下。</p><table><thead><tr><th>配置项</th><th>可选值</th><th>备注</th></tr></thead><tbody><tr><td><code>indent_style</code></td><td><code>tab</code> / <code>space</code></td><td>缩进风格</td></tr><tr><td><code>indent_size</code></td><td>数字</td><td>空格缩进数量</td></tr><tr><td><code>end_of_line</code></td><td><code>lf</code> / <code>cr</code> / <code>crlf</code></td><td>换行符风格</td></tr><tr><td><code>charset</code></td><td><code>utf-8</code> / <code>...</code></td><td>文件编码</td></tr><tr><td><code>trim_trailing_whitespace</code></td><td><code>true</code> / <code>false</code></td><td>移除行尾空白字符</td></tr><tr><td><code>insert_final_newline</code></td><td><code>true</code> / <code>false</code></td><td>文件永远以空行结尾</td></tr><tr><td><code>root</code></td><td><code>true</code> / <code>false</code></td><td>该属性表名此配置文件是最顶层的配置文件，不会再往上层寻找配置文件了</td></tr></tbody></table><p>可以在每个文件夹层级都定义配置文件，在进行格式化文件的时候，EditorConfig 会从当前目录至上级目录一直寻找 <code>.editorconfig</code> 文件，直到文件系统的根目录或者到某个包含 <code>root=true</code> 的配置文件为止。最终生效的配置文件是将所有寻找到的配置文件合并后的结果，路径短的配置内容会覆盖路径长的配置内容。</p><hr class="footnotes-sep">',13),p={class:"footnotes"},i={class:"footnotes-list"},u={id:"footnote1",class:"footnote-item"},f={href:"https://editorconfig.org/",target:"_blank",rel:"noopener noreferrer"},k=d("EditorConfig"),b=d(),m=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);l.render=function(c,d){const l=e("OutboundLink");return n(),a(o,null,[r,s("section",p,[s("ol",i,[s("li",u,[s("p",null,[s("a",f,[k,t(l)]),b,m])])])])],64)};export{l as default};
